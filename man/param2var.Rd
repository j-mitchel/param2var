% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/param2var.R
\name{param2var}
\alias{param2var}
\title{This function assigns a comma separated list of variables to global variables
and can assign default parameters from any given function to global variables.}
\usage{
param2var(def_fn = NULL, rm_vars = FALSE, ...)
}
\arguments{
\item{def_fn}{character The name of a function. The default parameters are extracted
from the specified function and set to global variables. Other explicitly set
parameters will override these defaults during assignment. (default=NULL)}

\item{rm_vars}{logical Whether to remove or assign the specified variables and
default parameters. Set to TRUE to remove these from the workspace. (default=FALSE)}

\item{...}{Any other variables/parameters to be set}
}
\value{
No value is returned. The function is called for it's side effect of
assigning and removing global variables.
}
\description{
This function assigns a comma separated list of variables to global variables
and can assign default parameters from any given function to global variables.
}
\examples{
# Say you have a function with many parameters that you want to debug, such as the following:
my_test_function <- function(p1, p2='foo', p3=10, p4=NULL, p5=12, p6='baz') {
     message('This function does nothing')
}

# Call param2var() to assign specified values to global variables with the same
# names as the parameters in the above function. In this example, we are going to
# set specific values for the parameters p1 and p2. By setting def_fn=my_test_function,
# you automatically assign the rest that function's default parameters to global variables.
param2var(def_fn=my_test_function, p1=99, p2='bar')

# After debugging, all of the variables we just set can easily be removed by
# setting rm_vars=FALSE
param2var(def_fn=my_test_function, p1=99, p2='bar', rm_vars=FALSE)

}
